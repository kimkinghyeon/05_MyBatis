<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">
    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
        <id property="code" column="menu_code"/>
        <result property="name" column="menu_name"/>
        <result property="price" column="menu_price"/>
        <result property="categoryCode" column="category_code"/>
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>
<!--  다이나밀 쿼리에서 사용하는 비교 연산자
  xml 파일 특성상 >,< 사용이 불가능
  gte (): >=
  gt : >
  lte : <=
  lt : <
  <![CDATA[문장]] 문장에 해당하는 공강에서는 부등호에 대한 표현이 자유로움
  <if> 태그 : test 속성의 조건에 해당하는 떄만 엘리먼트 구문을 쿼리에 포함한다.
  -->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
        where
        a.orderable_status = 'Y'
<!--      0 =< price <= 10000  -->
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
            and a.menu_price < #{ price }
            ]]>
        </if>
<!--        -->
        <if test="price gte 10000 and price lte 20000">
            <![CDATA[
            and a.menu_price between 10000 and #{ price }
            ]]>
        </if>
<!--        -->
        <if test="price gte 20000 and price lte 30000">
            <![CDATA[
            and a.menu_price between 20000 and #{ price }
            ]]>
        </if>
<!--        -->
        <if test="price gte 30000 and price lte 40000">
            <![CDATA[
            and a.menu_price between 30000 and #{ price }
            ]]>
        </if>
        order by a.menu_code
    </select>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
        <if test="condition == 'category'">
            join tbl_category b on (a.category_code = b.category_code)
        </if>
        where a.orderable_status = 'Y'
        <if test="condition == 'name'">
            and a.menu_name like concat('%',#{ value }, '%')
        </if>
        <if test="condition == 'category'">
            and b.category_name = #{ value }
        </if>
        order by a.menu_code
<!--
<choose> (when, otherwiese ) 태그는 java-case 문 같은 역할을 한다.
사용하는 방법
<choose>
    <when test = "조건">
        쿼리문
    </when>
    .....
    <otherwise>
        쿼리구문
    <otherwise>
  </choose>
  <when< 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함한다.
  어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구믄을 쿼리에 포함한다.
-->
    </select>
    <select id="searchMenuBySubCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
        where
        a.orderable_status = 'Y'
        <choose>
            <when test="value == '식사'">
                and a.category_code in (1,4,5,6,7)
            </when>
            <when test="value == '음료'">
                and a.category_code in (2,8,9,10)
            </when>
            <otherwise>
                and a.category_code in (3,11,12)
            </otherwise>
        </choose>
        order by a.menu_code
    </select>

<!--
   <foreach> 태그 : java 의 for 문 역할을 한다.
   1. collection 속성 : 반복을 수행할 대상
   2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름을 설정
   3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
   4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
   5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자
   -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
        where
        a.orderable_status = 'Y'
        and a.menu_code in
                <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator= ", " close=")">
                    #{ menuCode }
                </foreach>

        <!--        <foreach collection="com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()"-->
        <!--                 item="menuCode" open="(" separator=", " close=")">-->
        <!--            #{ menuCode }-->
        <!--        </foreach>-->
        <!--
                parameter 객체로 받아오지 않고, static 필드 또는 static 메소드에 직접 전급하여 반환닫아 사용 가능
                - static 필드 접근시 collection 속성 : @풀클래스명@필드명
                - static 메소드 접근시 collection 속성 : @풀클래스명@메소드명
                -
                -->
    </select>
<!--
<where> 태그 : 엘리먼트 구문이 where 시작하지 않으면 자동으로 where 를 붙여준다.
또한 where 엘리먼트 내부에 모든 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다.
단, name 부분에서 where 를 빼주지 않으면 where where 로 where 가 2개 생성될 수 있다.
엘리먼트 구문이 AND 나 OR로 시작하면 자동으로 해당 단어를 지워준다.
-->
<!--  <set> 태그 : set 태그  -->
    <update id="modifyMenu" parameterType="hashmap">
        update
        tbl_menu
<!--        set-->
<!--        <if test="name != null and name != ''">-->
<!--            menu_name = #{ name },-->
<!--        </if>-->
<!--        <if test="categoryCode != null and categoryCode != ''">-->
<!--            category_code = #{ categoryCode },-->
<!--        </if>-->
<!--       <if test="orderableStatus != null and orderableStatus != ''">-->
<!--           orderable_status = #{ orderableStatus }-->
<!--       </if>-->
<!--        where menu_code = #{ code }-->

<!-- 방법1. set 사용       -->
<!--        <set>-->
<!--                <if test="name != null and name != ''">-->
<!--                    menu_name = #{ name },-->
<!--                </if>-->
<!--                <if test="categoryCode != null and categoryCode != ''">-->
<!--                    category_code = #{ categoryCode },-->
<!--                </if>-->
<!--               <if test="orderableStatus != null and orderableStatus != ''">-->
<!--                   orderable_status = #{ orderableStatus }-->
<!--               </if>-->
<!--        </set>-->
<!--        where menu_code = #{ code }-->

<!-- 방법2. trim 사용-->
                <trim prefix="set" prefixOverrides=", ">
                        <if test="name != null and name != ''">
                            menu_name = #{ name },
                        </if>
                        <if test="categoryCode != null and categoryCode != ''">
                            category_code = #{ categoryCode },
                        </if>
                       <if test="orderableStatus != null and orderableStatus != ''">
                           orderable_status = #{ orderableStatus }
                       </if>
                </trim>
                where menu_code = #{ code }
    </update>

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
<!--
eq : equal to
ne : not equal to
    -->
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                a.orderable_status = 'Y' and
                a.menu_code = #{ value }
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashMap" resultMap="menuResultMap">
        select
        a.menu_code,
        a.menu_name,
        a.menu_price,
        a.category_code,
        a.orderable_status
        from
        tbl_menu a
<!--  방법 1. where 사용  -->
        <where>
        <if test="nameValue != null">
        a.menu_name like concat('%', #{ nameValue },'%')
        </if>
        <if test="categoryValue != null">
        a.category_code = #{ categoryValue }
        </if>
        </where>
<!-- 방법 <trim> 태그 이용
<trim> 태그 : 조회 조건에 AND 혹은 OR 로 시작하지 않는 다른 문자로 시작하는 경우 등
where 엘리먼트가 기본적으,로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
1. prefix 속성 : 처리 후 엘리먼틔 내용이 있으면 가장 앞에 붙여주는 내용 기술
2. prefixOverrides 속성 : 처리후 엘리먼트 내용 중에 가장 앞에 속성값에 해당하는 문자를 자동 삭제
3. suffix 속성 : 처리후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
4. suffixOverrides 속성 : 처리후 엘리먼트 내용 중 가장 뒤에 속성값에 해당하는 문자를 자동 삭제
-->
<!--        <trim prefix="where" prefixOverrides="AND | OR">-->
<!--                <if test="nameValue != null">-->
<!--                    a.menu_name like concat('%', #{ nameValue } , '%')-->
<!--                </if>-->
<!--            <if test="categoryValue != null">-->
<!--                and a.category_code = #{ categoryValue }-->
<!--            </if>-->
<!--        </trim>-->

    </select>
</mapper>